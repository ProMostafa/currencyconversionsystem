"""
Django settings for currencyconversionsystem project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
configuration_dir = os.path.dirname(os.path.abspath(__file__))
_base = os.path.dirname(configuration_dir)
sys.path.append(os.path.join(_base, "currencyconversionsystem"))
BASE_DIR = _base
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-**ot2qc27n3sv+-cn0e+!d(^$c%=-g&xlb^q3&6d3ewp)1=%g$"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# PMS Config
DECIMAL_PLACES = 5
MAX_DIGITS = 10
# RUNNINGMODE = os.environ.get("MODE", "test")
RUNNINGMODE = os.environ.get("MODE", "test")
# Timezone
TIME_ZONE = "Africa/Cairo"
USE_TZ = True


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_yasg",
    # Apps
    "exchangerates.apps.ExchangeratesConfig",
    "customer.apps.CustomerConfig",
]

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

# JWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "SLIDING_TOKEN_LIFETIME": timedelta(days=2),
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "configuration.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "configuration.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_SERVICE_HOST"),
        "PORT": os.environ.get("POSTGRES_PORT"),
        "ATOMIC_REQUESTS": True,
    }
}

REDIS_SERVER_HOST = os.environ.get("REDIS_SERVICE_HOST", "")
REDIS_SERVER_PORT = os.environ.get("REDIS_SERVICE_PORT", "")

# Cache time to live is 60 minutes. will be change to exchage time
# CACHE_TTL = 60 * 60
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": f"redis://{REDIS_SERVER_HOST}:{REDIS_SERVER_PORT}/1",
#         "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
#         "KEY_PREFIX": "asd",
#     }
# }

CELERY_BEAT_SCHEDULE = {
    "update_exchange_rates": {
        "task": "exchangerates.tasks.fetch_exchange_rates",
        # Schedule the task to run every hour (3600 seconds)
        "schedule": 120 if RUNNINGMODE else 3600,
    },
    "update_conversion_status": {
        "task": "exchangerates.tasks.update_conversion_status",
        "schedule": timedelta(minutes=2) if RUNNINGMODE else timedelta(hours=24),
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(_base, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# CELERY_BROKER_URL = "redis://redis:6379/0"
CELERY_BROKER_URL = f"redis://{REDIS_SERVER_HOST}:{REDIS_SERVER_PORT}/0"
CELERY_RESULT_BACKEND = f"redis://{REDIS_SERVER_HOST}:{REDIS_SERVER_PORT}/0"

# CELERY_BROKER_URL = "redis://localhost:6379/0"
# CELERY_RESULT_BACKEND = "redis://localhost:6379/0"

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "celery_task.log",
        },
    },
    "root": {
        "handlers": ["file"],
        "level": "DEBUG",
    },
}

# Enable debugging for Celery
CELERYD_HIJACK_ROOT_LOGGER = False
CELERYD_LOG_LEVEL = "DEBUG"
